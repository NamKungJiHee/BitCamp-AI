1. iterator

* iterable 객체: 반복 가능한 객체
* 대표적으로 iterable한 타입: list, dict, set, tuple, str...
iterator: 값을 차례대로 꺼낼 수 있는 객체
iterator는 iterable한 객체를 내장함수 또는 iterable 객체의 메소드로 객체를 생성할 수 있다.
= 즉 iterator : 요소가 복수인 컨테이너(리스트, 퓨플, 셋, 사전, 문자열)에서 각 요소를 하나씩 꺼내 어떤 처리를 수행할 수 있도록 하는 
간편한 방법을 제공하는 객체

* 파이썬 내장함수 iter()를 사용해 iterator 객체를 만든다.

>>> a = [1, 2, 3]
>>> a_iter = iter(a)
>>> type(a_iter)
<class 'list_iterator'>

2. .next()

iterator = iter([1, 2, 3, 4, 5])
print(next(iterator)) 
print(next(iterator)) 
print(next(iterator)) 
1 
2 
3
이 Iterator는 내부에 __next__ 메소드가 구현되어 있기 때문에 next 내장 함수가 호출될 때마다 원소를 하나씩 반환한다. 
위에서는 next를 세 번 호출했기 때문에 세 번째 값까지 호출됐다. 이 상태에서 iterator는 현재까지 값을 반환한 위치를 기억하고 있기 때문에 
다음에 next를 호출하면 네 번째 값(4)이 반환되리라고 예상할 수 있다.

*****iterator는 일회용 깡통과 같아서 값을 모두 사용했다면 재사용할 수 없다. 
*****iterator는 마지막 원소까지 모두 반환했고 이후에 next를 통해 강제적으로 반환을 요구하면 내장 예외인 StopIteration이 반환됨.
=  정리하면 Iterator는 Iterable에 iter 내장 함수를 적용해 반환되는 객체로서 next 함수를 통해 값을 한 번에 한 번씩 반환하는 특징이 있다. 
& 내부적으로 현재까지의 반환 상태를 관리하고 조건에서 정의한 마지막까지 반환하면 더 사용할 수 없으며 StopIteration 예외를 일으킨다.


>>> it = iter([1, 2, 3])  # [1, 2, 3]의 반복자 구하기
>>> next(it)              # 반복자의 다음 요소 구하기
1

>>> next(it)              # 반복자의 다음 요소 구하기
2

>>> next(it)              # 반복자의 다음 요소 구하기
3

>>> next(it)              # 더 구할 요소가 없으면 오류가 발생한다
StopIteration

########## iter() 함수와 next() 함수를 활용하면 for 문을 사용하지 않고도 컬렉션을 순회할 수 있다###########

3. 리스트

순서가 있는 수정가능한 객체의 집합.
수정, 삭제, 추가가 가능.
list 는 [ ] 형식

>>> [1, 3, 5, 7]
[1, 3, 5, 7]
>>> a = [1, 3, 5, 7]
>>> type(a)
<class 'list'>

* list는 0부터 시작하는 인덱스

4. 튜플

tuple(튜플)은 불변한 순서가 있는 객체의 집합
list형과 비슷하지만 한 번 생성되면 값을 변경할 수 없음

>>> t = (1, "korea", 3.5, 1)
>>> t
(1, 'korea', 3.5, 1)
>>> type(t)
<class 'tuple'>

tuple(튜플)은 '( )'를 보통 입력하지만, 괄호가 필수 조건은 아니다.
>>> p = 1, 3, 2, 5, 7
>>> type(p)
<class 'tuple'>


5. 딕셔너리

딕셔너리 타입은 immutable한 키(key)와 mutable한 값(value)으로 맵핑되어 있는 순서가 없는 집합

>>> {"a" : 1, "b":2}
{'a': 1, 'b': 2}

값은 중복될 수 있지만, 키가 중복되면 마지막 값으로 덮어씌워진다.
>>> {"a" : 1, "a":2}
{'a': 2}

순서가 없기 때문에 인덱스로는 접근할수 없고, 키로 접근 할 수 있다.

>>> d = {'abc' : 1, 'def' : 2}
>>> d[0]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 0
>>> d['abc']
1